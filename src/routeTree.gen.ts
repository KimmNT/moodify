/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestIndexRouteImport } from './routes/test/index'
import { Route as MoodIndexRouteImport } from './routes/mood/index'
import { Route as FavoriteIndexRouteImport } from './routes/favorite/index'
import { Route as ExploreIndexRouteImport } from './routes/explore/index'
import { Route as ContributeIndexRouteImport } from './routes/contribute/index'
import { Route as ContributeVideoIdIndexRouteImport } from './routes/contribute/$videoId/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const TestIndexRoute = TestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/test/index.lazy').then((d) => d.Route))
const MoodIndexRoute = MoodIndexRouteImport.update({
  id: '/mood/',
  path: '/mood/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/mood/index.lazy').then((d) => d.Route))
const FavoriteIndexRoute = FavoriteIndexRouteImport.update({
  id: '/favorite/',
  path: '/favorite/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/favorite/index.lazy').then((d) => d.Route),
)
const ExploreIndexRoute = ExploreIndexRouteImport.update({
  id: '/explore/',
  path: '/explore/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/explore/index.lazy').then((d) => d.Route))
const ContributeIndexRoute = ContributeIndexRouteImport.update({
  id: '/contribute/',
  path: '/contribute/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/contribute/index.lazy').then((d) => d.Route),
)
const ContributeVideoIdIndexRoute = ContributeVideoIdIndexRouteImport.update({
  id: '/contribute/$videoId/',
  path: '/contribute/$videoId/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/contribute/$videoId/index.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contribute': typeof ContributeIndexRoute
  '/explore': typeof ExploreIndexRoute
  '/favorite': typeof FavoriteIndexRoute
  '/mood': typeof MoodIndexRoute
  '/test': typeof TestIndexRoute
  '/contribute/$videoId': typeof ContributeVideoIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contribute': typeof ContributeIndexRoute
  '/explore': typeof ExploreIndexRoute
  '/favorite': typeof FavoriteIndexRoute
  '/mood': typeof MoodIndexRoute
  '/test': typeof TestIndexRoute
  '/contribute/$videoId': typeof ContributeVideoIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/contribute/': typeof ContributeIndexRoute
  '/explore/': typeof ExploreIndexRoute
  '/favorite/': typeof FavoriteIndexRoute
  '/mood/': typeof MoodIndexRoute
  '/test/': typeof TestIndexRoute
  '/contribute/$videoId/': typeof ContributeVideoIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contribute'
    | '/explore'
    | '/favorite'
    | '/mood'
    | '/test'
    | '/contribute/$videoId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contribute'
    | '/explore'
    | '/favorite'
    | '/mood'
    | '/test'
    | '/contribute/$videoId'
  id:
    | '__root__'
    | '/'
    | '/contribute/'
    | '/explore/'
    | '/favorite/'
    | '/mood/'
    | '/test/'
    | '/contribute/$videoId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContributeIndexRoute: typeof ContributeIndexRoute
  ExploreIndexRoute: typeof ExploreIndexRoute
  FavoriteIndexRoute: typeof FavoriteIndexRoute
  MoodIndexRoute: typeof MoodIndexRoute
  TestIndexRoute: typeof TestIndexRoute
  ContributeVideoIdIndexRoute: typeof ContributeVideoIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mood/': {
      id: '/mood/'
      path: '/mood'
      fullPath: '/mood'
      preLoaderRoute: typeof MoodIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favorite/': {
      id: '/favorite/'
      path: '/favorite'
      fullPath: '/favorite'
      preLoaderRoute: typeof FavoriteIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore/': {
      id: '/explore/'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contribute/': {
      id: '/contribute/'
      path: '/contribute'
      fullPath: '/contribute'
      preLoaderRoute: typeof ContributeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contribute/$videoId/': {
      id: '/contribute/$videoId/'
      path: '/contribute/$videoId'
      fullPath: '/contribute/$videoId'
      preLoaderRoute: typeof ContributeVideoIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContributeIndexRoute: ContributeIndexRoute,
  ExploreIndexRoute: ExploreIndexRoute,
  FavoriteIndexRoute: FavoriteIndexRoute,
  MoodIndexRoute: MoodIndexRoute,
  TestIndexRoute: TestIndexRoute,
  ContributeVideoIdIndexRoute: ContributeVideoIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
